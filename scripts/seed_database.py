import os
import psycopg2
from psycopg2.extras import Json
from dotenv import load_dotenv

# Cargar variables de entorno
load_dotenv()

# --- DATOS DE PRUEBA ---

# 1. Clientes y Mercados
CLIENT_DATA = {"name": "Cliente Demo", "api_keys": {}}
MARKET_DATA = {
    "name": "Espa√±a",
    "description": "Mercado principal",
    "competitors": ["Competidor A", "Competidor B", "Otra Marca"],
}

# 2. Categor√≠as Estrat√©gicas de Prompts
PROMPT_CATEGORIES = [
    ("An√°lisis de mercado", "Tendencias generales, h√°bitos de consumo, evoluci√≥n sectorial."),
    ("An√°lisis de competencia", "Acciones de competidores, campa√±as, share of voice, comparativas."),
    ("An√°lisis de sentimiento y reputaci√≥n", "Opiniones de consumidores, emociones predominantes, percepciones de marca."),
    ("An√°lisis de desempe√±o (KPIs)", "M√©tricas de visibilidad, impacto de campa√±as, evoluci√≥n temporal."),
    ("An√°lisis de oportunidades", "Nuevos nichos, innovaci√≥n de producto, territorios de comunicaci√≥n."),
    ("An√°lisis de riesgos", "Crisis potenciales, quejas recurrentes, temas sensibles."),
    ("An√°lisis contextual", "Factores externos: noticias, regulaci√≥n, econom√≠a, cultura."),
]

# 3. Set de Prompts de Prueba (Query, Categor√≠a)
PROMPTS_TO_INSERT = [
    # An√°lisis de mercado
    ("¬øCu√°les son las √∫ltimas tendencias en consumo de contenido digital en Espa√±a?", "An√°lisis de mercado"),
    ("Evoluci√≥n del sector ed-tech en LATAM durante los √∫ltimos 2 a√±os.", "An√°lisis de mercado"),
    # An√°lisis de competencia
    ("Comparativa de precios de m√°steres de marketing digital entre las principales escuelas de negocio espa√±olas.", "An√°lisis de competencia"),
    ("¬øQu√© campa√±as de publicidad ha lanzado recientemente nuestro principal competidor?", "An√°lisis de competencia"),
    # An√°lisis de sentimiento y reputaci√≥n
    ("¬øCu√°l es la percepci√≥n general de los estudiantes sobre la formaci√≥n online en Espa√±a?", "An√°lisis de sentimiento y reputaci√≥n"),
    ("Opiniones y quejas sobre los bootcamps de programaci√≥n en Madrid.", "An√°lisis de sentimiento y reputaci√≥n"),
    # An√°lisis de desempe√±o (KPIs)
    ("Evoluci√≥n de la visibilidad online de nuestra marca en el √∫ltimo trimestre.", "An√°lisis de desempe√±o (KPIs)"),
    # An√°lisis de oportunidades
    ("¬øQu√© nuevos nichos de mercado existen para la formaci√≥n en inteligencia artificial?", "An√°lisis de oportunidades"),
    # An√°lisis de riesgos
    ("¬øCu√°les son las principales cr√≠ticas a los modelos de suscripci√≥n en plataformas educativas?", "An√°lisis de riesgos"),
    # An√°lisis contextual
    ("¬øC√≥mo afecta la nueva regulaci√≥n europea de IA al sector educativo?", "An√°lisis contextual"),
]


def get_db_connection():
    """Establece la conexi√≥n con la base de datos."""
    return psycopg2.connect(
        host=os.getenv("DB_HOST", "postgres"),
        port=os.getenv("DB_PORT", 5432),
        dbname=os.getenv("POSTGRES_DB"),
        user=os.getenv("POSTGRES_USER"),
        password=os.getenv("POSTGRES_PASSWORD"),
    )


def seed_data():
    """Inserta los datos iniciales en la base de datos."""
    conn = get_db_connection()
    cur = conn.cursor()
    print("üå± Empezando a poblar la base de datos con datos de prueba...")

    try:
        # 1. Insertar Cliente
        cur.execute("INSERT INTO clients (name, api_keys) VALUES (%s, %s) ON CONFLICT (name) DO NOTHING RETURNING id;",
                    (CLIENT_DATA["name"], Json(CLIENT_DATA["api_keys"])))
        client_id_row = cur.fetchone()
        if not client_id_row:
            cur.execute("SELECT id FROM clients WHERE name = %s;", (CLIENT_DATA["name"],))
            client_id = cur.fetchone()[0]
        else:
            client_id = client_id_row[0]
        print(f"   - Cliente '{CLIENT_DATA['name']}' asegurado con ID: {client_id}")

        # 2. Insertar Mercado (con lista de competidores)
        cur.execute(
            """
            INSERT INTO markets (client_id, name, description, competitors)
            VALUES (%s, %s, %s, %s)
            ON CONFLICT (client_id, name) DO UPDATE SET
                description = EXCLUDED.description,
                competitors = EXCLUDED.competitors
            RETURNING id;
            """,
            (
                client_id,
                MARKET_DATA["name"],
                MARKET_DATA["description"],
                Json(MARKET_DATA["competitors"]),
            ),
        )
        market_id = cur.fetchone()[0]
        print(f"   - Mercado '{MARKET_DATA['name']}' asegurado con ID: {market_id}")

        # 3. Insertar Categor√≠as
        category_map = {}
        for name, desc in PROMPT_CATEGORIES:
            cur.execute("INSERT INTO prompt_categories (name, description) VALUES (%s, %s) ON CONFLICT (name) DO NOTHING RETURNING id;",
                        (name, desc))
            category_id_row = cur.fetchone()
            if not category_id_row:
                cur.execute("SELECT id FROM prompt_categories WHERE name = %s;", (name,))
                cat_id = cur.fetchone()[0]
            else:
                cat_id = category_id_row[0]
            category_map[name] = cat_id
        print(f"   - {len(category_map)} categor√≠as estrat√©gicas aseguradas.")

        # 4. Insertar Prompts
        inserted_count = 0
        for query_text, category_name in PROMPTS_TO_INSERT:
            category_id = category_map.get(category_name)
            if not category_id:
                print(f"   - ‚ö†Ô∏è  Categor√≠a '{category_name}' no encontrada. Saltando prompt.")
                continue
            
            cur.execute("INSERT INTO queries (market_id, category_id, query) VALUES (%s, %s, %s) ON CONFLICT (market_id, query) DO NOTHING;",
                        (market_id, category_id, query_text))
            if cur.rowcount > 0:
                inserted_count += 1
        
        print(f"   - {inserted_count} nuevos prompts insertados.")
        conn.commit()
        print("\n‚úÖ ¬°Base de datos poblada con √©xito!")

    except Exception as e:
        conn.rollback()
        print(f"‚ùå Error al poblar la base de datos: {e}")
    finally:
        cur.close()
        conn.close()


if __name__ == "__main__":
    seed_data()
